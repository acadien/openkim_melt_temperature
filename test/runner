#!/usr/bin/env python

#An Adam Cadien python script. 
#Don't like the test? Well neither do I, bug me and I might fix it.
#adamcadien at gmail dot com
#V1.0 KCC August 2014

#runner
#Goal: Calculate the melting temperature at a constant pressure using the coexistence
#method.

import subprocess,json,shutil
from scipy import ndimage
import numpy as np
from collections import OrderedDict
#local
from parser import *
from KIMception import *

################################
### File Names and Constants ###
################################

lammpsMeltFile_in   = "in.meltTest_runner"
lammpsMeltFile_out  = "output/in.meltTest"
initialDumpFile     = "output/initial.dump"
finalDumpFile       = "output/final.dump"
resultsEDN          = "output/results.edn"
dataDumpFile        = "output/config.dat"
thermoDumpFile      = "output/thermo.dat"
ZPEFinallog         = "output/peprofile.dat"
lmpLogIn            = "log.lammps"
lmpLogOut           = "output/log.lammps"
runnerVariables     = ["runnerSpeciesSymbol","runnerLatticeType","runnerKimModel",\
                       "runnerMass","runnerLatticeConstant","runnerTemperatureGuess",\
                       "runnerTemperatureHigh","runnerPressure",\
                       "runnerAnnealTimeSteps","runnerThermoTime"]
thermoTS = 100

##########################
### Prepare EDN Output ###
##########################
results = OrderedDict()
results['property-id'] = "tag:staff@noreply.openkim.org,2014-08-20:property/melt-temperature-constant-pressure-cubic-crystal"
results['instance-id'] = 1
results['short-name'] = {}
results['species'] = {}
results['a'] = {}
results['basis-atom-coordinates'] = []
results['space-group']=""
results['wyckoff-multiplicity-and-letter']=""
results['pressure'] = 0.0
results['melt-temperature'] = 0.0

###################
### Parse Input ###
###################

replacementVars={}
MPIRanks = int(raw_input("MPIRanks to run LAMMPS on [def:1]: ") or 1)
replacementVars['runnerSpeciesSymbol'] = raw_input('Species Symbol: ')
replacementVars['runnerLatticeType'] = raw_input('Lattice type: ')
replacementVars['runnerKimModel'] = raw_input('KIM Model: ')
replacementVars['runnerMass'] = raw_input('Mass [def:1.0]: ') or "1.0"
replacementVars['runnerLatticeConstant'] = raw_input('Lattice Constant (Angstroms): ')
replacementVars['runnerTemperatureGuess'] = raw_input('Approximate Melt Temperature (Kelvin): ')
replacementVars['runnerTemperatureHigh'] = raw_input('High Temperature (Kelvin) (should be 2-3x melt Temperature) [def:5000.0]: ') or "5000.0"
replacementVars['runnerPressure'] = raw_input('Pressure (Bars) [def:0.0]: ') or "0.0"
replacementVars['runnerAnnealTimeSteps'] = str(int(float(raw_input('Timesteps to anneal coexistence [def:1E6]: ') or 1E6)))

replacementVars['runnerLatticeType'] = replacementVars['runnerLatticeType'].lower()
replacementVars['runnerThermoTime'] = str(thermoTS)
annealTime = int(replacementVars['runnerAnnealTimeSteps'])

#Error Check input
if replacementVars['runnerAnnealTimeSteps'] < 1E5:
    raise KIMTestError("STOP What you're doing. Anneal time is waaaaaay too short. Minimum is 1E5 time-steps")
if replacementVars['runnerTemperatureHigh'] < 2500:
    raise KIMTestError("STOP What you're doing. High temperature is too low, you can't be sure you'll attain a melt at all. Minimum is 2500K.")

#Setup EDN requirements for lattice information.
lattice = replacementVars['runnerLatticeType']
if lattice == 'bcc':
    results['space-group']={'source-value' : 'Im-3m'}
    results['wyckoff-multiplicity-and-letter']={'source-value' : '2a'}
    NBatoms=2
    results['basis-atom-coordinates']={'source-value' : [[0,0,0],[0.5,0.5,0.5]]}
elif lattice == 'fcc':
    results['space-group']={'source-value' : 'Fm-3m'}
    NBatoms=4
    results['wyckoff-multiplicity-and-letter']={'source-value' : '4a'}
    results['basis-atom-coordinates']={'source-value' : [[0,0,0],[0,0.5,0.5],[0.5,0,0.5],[0.5,0.5,0]]}
elif lattice == 'sc':
    results['space-group']={'source-value' : 'Pm-3m'}
    NBatoms=1
    results['wyckoff-multiplicity-and-letter']={'source-value' : '1a'}
    results['basis-atom-coordinates']={'source-value' : [[0,0,0]]}
elif lattice == 'diamond':
    results['space-group']={'source-value' : 'Fd-3m'}
    results['wyckoff-multiplicity-and-letter']={'source-value' : '8a'}
    NBatoms=8
    results['basis-atom-coordinates']={'source-value' : [[0,0,0],[0,0.5,0.5],[0.5,0.5,0],[0.5,0,0.5],[0.75,0.25,0.75],[0.25,0.25,0.25],[0.25,0.75,0.75],[0.75,0.75,0.25]]}
else:
    print "Error: This Test supports only cubic lattices (specified by 'bcc', 'fcc', 'sc', or 'diamond'). Exiting..."
    raise KIMTestError("Error: This Test supports only cubic lattices (specified by 'bcc', 'fcc', 'sc', or 'diamond'). Exiting...")
    exit(1)
results['short-name'] = {'source-value' : "[ %s ]"%replacementVars['runnerLatticeType']}
results['species']= {'source-value' :  [replacementVars['runnerSpeciesSymbol']]*NBatoms}


#################################
### Make the lammps melt file ###
#################################

def replaceString(inputText,oldString,newString):
    #Loops over the inputText, replaces oldString with newString
    return [line.replace(oldString,newString) for line in inputText]

lammpsMeltOut = open(lammpsMeltFile_in,"r").readlines()
for oldVar, newVar in replacementVars.items():
    lammpsMeltOut = replaceString(lammpsMeltOut,oldVar,newVar)

open(lammpsMeltFile_out,"w").writelines(lammpsMeltOut)


####################
### Run the test ###
####################

if MPIRanks == 1:
    commandString = "lmp_g++ -in %s"%(lammpsMeltFile_out)
else:
    commandString = "mpiexec -np %d lmp_g++ -in %s"%(MPIRanks,lammpsMeltFile_out)
command = commandString.split()
lammpsThermoData = subprocess.check_output(command).split("\n")


##########################
#### Parse Test Output ###
##########################

annealThermo,annealStartI = parseThermo(lammpsThermoData,"Step Temp Press Volume TotEng Lx Pxx Pyy Pzz Pxy Pxz Pyz")
annealThermo[0] = map(int,annealThermo[0])  #Steps should be ints

#Grab the atomic configuration from pre-anneal
initialDump = open(initialDumpFile,"r").readlines()
boundsInitTS,atomsInitTS = parseDump(initialDump)

#Grab the PE from post-anneal (101x total)
finalDump = open(initialDumpFile,"r").readlines()
boundsFinalTS,atomsFinalTS = parseDump(initialDump)

#Atomic locations in fractional coordinates
ids,types,Xs,Ys,Zs,PEs = atomsInitTS[0]
PEInit = list(PEs)
ZInit = list(Zs)

#Atomic locations in fractional coordinates
ZFinals,PEFinals = list(),list()
for i in atomsFinalTS:
    ZFinals.append(i[4])
    PEFinals.append(i[5])

# Log stuff before processing and error checking so logs exist if test exits early. 

#Write Thermodynamic data during the heat/quench/anneal process
thermoData=["Step Temp Press Volume TotEng Lx Pxx Pyy Pzz Pxy Pxz Pyz\n"]+map(lambda x: " ".join(map(str,x))+"\n",zip(*annealThermo))
open(thermoDumpFile,"w").writelines(thermoData)

#Write Final configuration with atomic coordinates and potential energy
configData=["ID Species X Y Z PE\n"]+map(lambda x: " ".join(map(str,x))+"\n",zip(*atomsFinalTS[-1]))
open(dataDumpFile,"w").writelines(configData)

#Move the log.lammps for posterity (it is effectively redundant but might somehow be useful?)
shutil.move(lmpLogIn,lmpLogOut)

###############################################################
### Track the Phase Boundary using Potential Energy and MSD ###
###############################################################

def sliceBin(Zs,Vals,nBin):
    #Zs: Z fractional coordinates, 
    #Vals: corresponding value for atom with Zs coordinate
    #nBins: how many bins to generate
    #returns the average value in each slice

    binnedZ = [int(z*nBin) for z in Zs]
    bins = [float(b)/nBin for b in sorted(list(set(binnedZ)))]
    vals = ndimage.measurements.mean(Vals,labels=binnedZ,index=np.unique(binnedZ))
    return bins,vals

def deriv(h,vals):
    #Derivative of a looped list
    return [(vals[i] - vals[i-1])/h for i in range(len(vals))]

def windowAvg(a,n=5):
    #A simple window average
    a = list(a)
    m = len(a)
    b = a+a+a
    return np.convolve(b, np.ones(n)/n,mode='same')[m:2*m]

def phaseBoundsByPE(Zs,PEs,liqPE,solPE,logName=None):
    #Given the fractional Z coordinates, PE per atom and 
    #average PE for the liquid/solid phase
    #this function returns a guess as to the location of the
    #solid liquid phase boundaries, assumes only 2 phase boundaries

    nbins = 50
    zBins,zPE = sliceBin(Zs,PEInit,nbins)
    zPEsmooth = windowAvg(zPE,5)
    zPEprime = windowAvg(deriv(zBins[1]-zBins[0],zPEsmooth)).tolist()
    if logName!=None:
        convert = lambda x: " ".join(map(str,x))+"\n"
        zlog = ["Z coord ($\AA$), Average PE (eV)\n"]+map(convert,zip(zBins,zPE))
        open(logName,"w").writelines(zlog)

    boundIndex1 = zPEprime.index(min(zPEprime))
    boundIndex2 = zPEprime.index(max(zPEprime))
    lowerBoundIndex = min(boundIndex1,boundIndex2)
    upperBoundIndex = max(boundIndex1,boundIndex2)
    phase1Width = upperBoundIndex-lowerBoundIndex
    phase2Width = nbins - phase1Width
    p1perc = int(float(phase1Width)/nbins*100)
    p2perc = int(float(phase2Width)/nbins*100)
    lowbperc = float(lowerBoundIndex)/nbins
    uppbperc = float(upperBoundIndex)/nbins
    phase1PE = sum(zPE[lowerBoundIndex:upperBoundIndex])/phase1Width
    phase2PE = (sum(zPE[upperBoundIndex:])+sum(zPE[:lowerBoundIndex]))/phase2Width

    #phase PE must be within 3 percent of actual solid or liquid PE
    errorBound = 0.04 

    #Error checking
    liq1Err = np.fabs(phase1PE - liqPE) / np.fabs(phase1PE)
    liq2Err = np.fabs(phase2PE - liqPE) / np.fabs(phase2PE)
    sol1Err = np.fabs(phase1PE - solPE) / np.fabs(phase1PE)
    sol2Err = np.fabs(phase2PE - solPE) / np.fabs(phase2PE)

    #print liq1Err,sol1Err
    #print liq2Err,sol2Err

    if sol1Err < liq1Err and sol2Err < liq2Err:
        raise KIMTestError("It appears the entire simulation is solid, should rerun with higher starting temperature")
    if sol1Err > liq1Err and sol2Err > liq2Err:
        raise KIMTestError("It appears the entire simulation is liquid, should rerun with lower starting temperature")
    
    solPerc,liqPerc = -1,-1
    if sol1Err < liq1Err and sol2Err > liq2Err:
        solPerc = p1perc
        liqPerc = p2perc
    elif sol1Err > liq1Err and sol2Err < liq2Err:
        solPerc = p2perc
        liqPerc = p1perc
    else:
        raise KIMTestError("Unable to tell which phase is solid/liquid based on Potential Energy")

    #Print out results, all pretty like for those nice KIM users
    print "="*50
    print "=== S-L Phase Boundary Tracker: Potential Energy"
    print "="*50
    print "        Solid Liquid Amount BoundLocat."
    print "phase1: %s  %s  %d%s     %2.2f"%(sol1Err<errorBound,liq1Err<errorBound,p1perc,"%",lowbperc)
    print "phase2: %s  %s  %d%s     %2.2f"%(sol2Err<errorBound,liq2Err<errorBound,p2perc,"%",uppbperc)
    print "="*50

    return lowerBoundIndex, upperBoundIndex, solPerc, liqPerc


#############################################################
#### Find the Liquid and Solid average potential energies ###
#############################################################

#The initial boundary should be stationary at halfZ
#Solid is lower half, liquid is upper half
halfZ = 0.5
solidEnergy, liquidEnergy = 0.0, 0.0
solidCount, liquidCount = 0, 0
for pe,z in zip(PEInit,ZInit):
    if z>halfZ:
        liquidCount += 1
        liquidEnergy += pe
    if z<halfZ:
        solidCount += 1
        solidEnergy += pe
liquidPE = liquidEnergy/liquidCount
solidPE = solidEnergy/solidCount

#If solidPE == liquidPE it implies the entire simulation is liquid. Not possible for entire simulation to be solid before annealing.
if np.fabs(liquidPE - solidPE)/np.fabs(liquidPE) < 0.03:
    raise KIMTestError("Liquid and Solid Potential Energies are nearly the same, this probably means everything has melted, restart with lower initial temperature. If this doesn't work then the Solid and Liquid PE are too simple and this test will not work.")
    exit(1)


################################
### PRE-ANNEAL PE PHASE TEST ###
################################

#Check that you have a good initial bounds, also does error checking
print "\nPRE ANNEAL TEST:"
phaseBoundsByPE(ZInit,PEInit,liquidPE,solidPE)
print "Note: Material should be exactly half liquid and half solid at this point (above)."
print "\n"


#################################
### POST-ANNEAL PE PHASE TEST ###
#################################

#Check the final bounds using PE
ZFin = ZFinals[-1]         #Final Z fractional cooridnates
PEFin = PEFinals[-1]       #Final per atom PE
print "POST ANNEAL TEST:"
pb1,pb2,solPerc,liqPerc = phaseBoundsByPE(ZFin,PEFin,liquidPE,solidPE,logName=ZPEFinallog)
nx,ny,nz = grabNxyzLMP(open(lammpsMeltFile_in,"r").readlines())


##############################################
### Analyze Thermodynamic data from anneal ###
##############################################

#Simple averaging over last 1000 thermo outputs
Nlast = annealTime/thermoTS/10
finalT = sum(annealThermo[1][-Nlast:])/Nlast
finalTstdev = np.std(annealThermo[1][-Nlast:])
finalP = sum(annealThermo[2][-Nlast:])/Nlast
finalPstdev = np.std(annealThermo[2][-Nlast:])
finalLx = sum(annealThermo[5][-Nlast:])/Nlast
finalLxstdev = np.std(annealThermo[5][-Nlast:])
finala = finalLx / nx
finalastdev = finalLxstdev / nx
finalVectPressures=list()
finalVectPressuresStdev=list()
for i in range(6,12):
    finalVectPressures.append(sum(annealThermo[i][-Nlast:])/Nlast)
    finalVectPressuresStdev.append(np.std(annealThermo[i][-Nlast:]))

results["a"] = {"source-value": "%5.5f"%finala, \
                "source-std-uncert-value": "%5.5f"%finalastdev, \
                "source-unit": "angstrom"}

results["melt-temperature"] = {"source-value": "%5.5f"%finalT, \
                "source-std-uncert-value": "%5.5f"%finalTstdev, \
                "source-unit": "K"}

results["pressure"] = {"source-value": "%5.5f"%finalP, \
                "source-std-uncert-value": "%5.5f"%finalPstdev, \
                "source-unit": "bar"}

results["cauchy-stress"] = {"source-value": finalVectPressures,\
                            "source-std-uncert-value": finalVectPressuresStdev,\
                            "source-unit": "bar"}

print "="*50
print "\n=== Final Results"
print "="*50

print "Temperature: %f +/- %f (K)"%(finalT,finalTstdev)
print "Pressure: %f +/- %f (bar)"%(finalP,finalPstdev)
print "="*50


####################################################################################
### Write Results to EDN, copy relevant files to output, generate relevant plots ###
####################################################################################

#EDN File for KIM
open(resultsEDN,"w").writelines(json.dumps(results,separators=(" "," "),indent=2,sort_keys=False))
