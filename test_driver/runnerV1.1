#!/usr/bin/env python

#Adam Cadien KCC August 2014
#adamcadien at gmail dot com
#V1.1

#runner
#Goal: Calculate the melting temperature at a constant pressure using the coexistence method.

import subprocess,json,shutil
from collections import OrderedDict
#local
from KIMception import * #exceptions
import lammpsIO,parser,phase

################################
### File Names and Constants ###
################################

lammpsShortMeltFile_in = "in.shortMelt_runner"
lammpsMeltFile_in      = "in.melt_runner"
lammpsMeltFile_out     = "output/in.meltTest"
lammpsThermoDataFile = "output/log.lammps"
initialDumpFile     = "output/initial.dump"
finalDumpFile       = "output/final.dump"
resultsEDN          = "output/results.edn"
dataDumpFile        = "output/config.dat"
thermoDumpFile      = "output/thermo.dat"
ZPEFinallog         = "output/PEprofile.dat"
lmpLogIn            = "log.lammps"
lmpLogOut           = "output/log.lammps"
runnerVariables     = ["runnerSpeciesSymbol","runnerLatticeType","runnerKimModel",\
                       "runnerMass","runnerLatticeConstant","runnerTemperatureGuess",\
                       "runnerTemperatureHigh","runnerPressure","runnerThermoTime"]
thermoTS = 100

##########################
### Prepare EDN Output ###
##########################
results = OrderedDict()
results['property-id'] = "tag:staff@noreply.openkim.org,2014-08-20:property/melt-temperature-constant-pressure-cubic-crystal"
results['instance-id'] = 1
results['short-name'] = {}
results['species'] = {}
results['a'] = {}
results['basis-atom-coordinates'] = []
results['space-group']=""
results['wyckoff-multiplicity-and-letter']=""
results['pressure'] = 0.0
results['melt-temperature'] = 0.0

###################
### Parse Input ###
###################

replacementVars={}
MPIRanks = int(raw_input("MPIRanks to run LAMMPS on [def:1]: ") or 1)
replacementVars['runnerKimModel'] = raw_input('KIM Model: ')
replacementVars['runnerSpeciesSymbol'] = raw_input('Species Symbol: ')
replacementVars['runnerLatticeType'] = raw_input('Lattice type: ')
replacementVars['runnerLatticeConstant'] = raw_input('Lattice Constant (Angstroms): ')
replacementVars['runnerMass'] = raw_input('Mass [def:1.0]: ') or "1.0"
replacementVars['runnerPressure'] = raw_input('Pressure (Bars) [def:0.0]: ') or "0.0"

replacementVars['runnerLatticeType'] = replacementVars['runnerLatticeType'].lower()
replacementVars['runnerThermoTime'] = str(thermoTS)
print ""

#Setup EDN requirements for lattice information.
lattice = replacementVars['runnerLatticeType']
if lattice == 'bcc':
    results['space-group']={'source-value' : 'Im-3m'}
    results['wyckoff-multiplicity-and-letter']={'source-value' : '2a'}
    NBatoms=2
    results['basis-atom-coordinates']={'source-value' : [[0,0,0],[0.5,0.5,0.5]]}
elif lattice == 'fcc':
    results['space-group']={'source-value' : 'Fm-3m'}
    NBatoms=4
    results['wyckoff-multiplicity-and-letter']={'source-value' : '4a'}
    results['basis-atom-coordinates']={'source-value' : [[0,0,0],[0,0.5,0.5],[0.5,0,0.5],[0.5,0.5,0]]}
elif lattice == 'sc':
    results['space-group']={'source-value' : 'Pm-3m'}
    NBatoms=1
    results['wyckoff-multiplicity-and-letter']={'source-value' : '1a'}
    results['basis-atom-coordinates']={'source-value' : [[0,0,0]]}
elif lattice == 'diamond':
    results['space-group']={'source-value' : 'Fd-3m'}
    results['wyckoff-multiplicity-and-letter']={'source-value' : '8a'}
    NBatoms=8
    results['basis-atom-coordinates']={'source-value' : [[0,0,0],[0,0.5,0.5],[0.5,0.5,0],[0.5,0,0.5],[0.75,0.25,0.75],[0.25,0.25,0.25],[0.25,0.75,0.75],[0.75,0.75,0.25]]}
else:
    print "Error: This Test supports only cubic lattices (specified by 'bcc', 'fcc', 'sc', or 'diamond'). Exiting..."
    raise KIMTestError("Error: This Test supports only cubic lattices (specified by 'bcc', 'fcc', 'sc', or 'diamond'). Exiting...")
    exit(1)
results['short-name'] = {'source-value' : "[ %s ]"%replacementVars['runnerLatticeType']}
results['species']= {'source-value' :  [replacementVars['runnerSpeciesSymbol']]*NBatoms}


#############################################
### Make the lammps melt file, Run LAMMPS ###
#############################################

bigTs = range(100,5100,500)
highT = 5000
replacementVars['runnerTemperatureHigh'] = str(highT)
meltTrials = {}
debug = False
for trialT in bigTs:

    replacementVars['runnerTemperatureGuess'] = str(trialT)
    lammpsIO.writeAndRun(lammpsShortMeltFile_in, replacementVars, MPIRanks)
    lammpsThermoDataFileT = lammpsThermoDataFile + str(trialT)
    phase = checkCoexistence(initialDumpFile, finalDumpFile, lammpsThermoDataFile, debug)
    print trialT, phase



"""
##############################################
### Analyze Thermodynamic data from anneal ###
##############################################

#Simple averaging over last 1000 thermo outputs
Nlast = annealTime/thermoTS/10
finalT = sum(annealThermo[1][-Nlast:])/Nlast
finalTstdev = np.std(annealThermo[1][-Nlast:])
finalP = sum(annealThermo[2][-Nlast:])/Nlast
finalPstdev = np.std(annealThermo[2][-Nlast:])
finalLx = sum(annealThermo[5][-Nlast:])/Nlast
finalLxstdev = np.std(annealThermo[5][-Nlast:])
finala = finalLx / nx
finalastdev = finalLxstdev / nx
finalVectPressures=list()
finalVectPressuresStdev=list()
for i in range(6,12):
    finalVectPressures.append(sum(annealThermo[i][-Nlast:])/Nlast)
    finalVectPressuresStdev.append(np.std(annealThermo[i][-Nlast:]))

results["a"] = {"source-value": "%5.5f"%finala, \
                "source-std-uncert-value": "%5.5f"%finalastdev, \
                "source-unit": "angstrom"}

results["melt-temperature"] = {"source-value": "%5.5f"%finalT, \
                "source-std-uncert-value": "%5.5f"%finalTstdev, \
                "source-unit": "K"}

results["cauchy-stress"] = {"source-value": finalVectPressures,\
                            "source-std-uncert-value": finalVectPressuresStdev,\
                            "source-unit": "bar"}

print "="*50
print "\n=== Final Results"
print "="*50

print "Temperature: %f +/- %f (K)"%(finalT,finalTstdev)
print "Pressure: %f +/- %f (bar)"%(finalP,finalPstdev)
print "="*50


####################################################################################
### Write Results to EDN, copy relevant files to output, generate relevant plots ###
####################################################################################

#EDN File for KIM
open(resultsEDN,"w").writelines(json.dumps(results,separators=(" "," "),indent=2,sort_keys=False))
"""
